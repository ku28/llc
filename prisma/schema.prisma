generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  email        String?  @unique
  name         String?
  passwordHash String?
  role         String   @default("staff")
  createdAt    DateTime @default(now())
  profileImage String?
  verified     Boolean  @default(false)
  phone        String?  @unique
}

model PendingUser {
  id                Int      @id @default(autoincrement())
  email             String   @unique
  name              String?
  passwordHash      String?
  role              String   @default("staff")
  verificationToken String   @unique
  createdAt         DateTime @default(now())
  expiresAt         DateTime
  profileImage      String?
}

model OTP {
  id         Int      @id @default(autoincrement())
  identifier String   @unique
  otp        String
  name       String?
  createdAt  DateTime @default(now())
  expiresAt  DateTime
}

model Patient {
  id                        Int               @id @default(autoincrement())
  firstName                 String
  lastName                  String
  phone                     String?
  email                     String?           @unique
  opdNo                     String?
  date                      DateTime?         @default(now())
  dob                       DateTime?
  age                       Int?
  address                   String?
  gender                    String?
  nextVisit                 DateTime?
  occupation                String?
  pendingPaymentCents       Int               @default(0)
  height                    Float?
  weight                    Float?
  fatherHusbandGuardianName String?
  createdAt                 DateTime          @default(now())
  imageUrl                  String?
  appointments              Appointment[]
  customerInvoices          CustomerInvoice[]
  invoices                  Invoice[]
  visits                    Visit[]
}

model Appointment {
  id        Int      @id @default(autoincrement())
  patientId Int
  scheduled DateTime
  notes     String?
  status    String   @default("scheduled")
  createdAt DateTime @default(now())
  patient   Patient  @relation(fields: [patientId], references: [id])
}

model AppointmentRequest {
  id            Int      @id @default(autoincrement())
  userId        Int
  userName      String
  userEmail     String
  userPhone     String
  message       String?
  status        String   @default("pending")
  patientId     Int?
  appointmentId Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Invoice {
  id         Int       @id @default(autoincrement())
  patientId  Int
  totalCents Int
  paid       Boolean   @default(false)
  dueDate    DateTime?
  createdAt  DateTime  @default(now())
  patient    Patient   @relation(fields: [patientId], references: [id])
}

model Product {
  id                   Int                   @id @default(autoincrement())
  name                 String
  priceCents           Int
  quantity             Int                   @default(0)
  actualInventory      Int?
  inventoryValue       Float?
  latestUpdate         DateTime?
  purchasePriceCents   Int                   @default(0)
  purchaseValue        Float?
  salesValue           Float?
  totalPurchased       Int                   @default(0)
  totalSales           Int                   @default(0)
  unit                 String?
  categoryId           Int?
  customerInvoiceItems CustomerInvoiceItem[]
  demandForecasts      DemandForecast[]
  prescriptions        Prescription[]
  category             Category?             @relation(fields: [categoryId], references: [id])
  batches              ProductBatch[]
  productOrders        ProductOrder[]
  purchaseOrderItems   PurchaseOrderItem[]
  stockTransactions    StockTransaction[]
  treatmentProducts    TreatmentProduct[]
}

model Category {
  id           Int       @id @default(autoincrement())
  name         String    @unique
  code         String?
  createdAt    DateTime  @default(now())
  reorderLevel Int       @default(0)
  products     Product[]
}

model Treatment {
  id                Int                @id @default(autoincrement())
  dosage            String?
  administration    String?
  procedure         String?
  notes             String?
  createdAt         DateTime           @default(now())
  additions         String?
  diseaseAction     String?
  droppersToday     Int?
  organ             String?
  presentation      String?
  provDiagnosis     String?
  quantity          Int?
  speciality        String?
  srNo              String?
  timing            String?
  treatmentPlan     String?
  planNumber        String?
  prescriptions     Prescription[]
  treatmentProducts TreatmentProduct[]
}

model TreatmentProduct {
  id               Int       @id @default(autoincrement())
  treatmentId      Int
  productId        Int
  comp1            String?
  comp2            String?
  comp3            String?
  comp4            String?
  comp5            String?
  quantity         Int       @default(1)
  createdAt        DateTime  @default(now())
  additions        String?
  dosage           String?
  droppersToday    Int?
  medicineQuantity Int?
  presentation     String?
  procedure        String?
  timing           String?
  product          Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  treatment        Treatment @relation(fields: [treatmentId], references: [id], onDelete: Cascade)

  @@unique([treatmentId, productId])
}

model Visit {
  id                   Int            @id @default(autoincrement())
  patientId            Int
  opdNo                String
  date                 DateTime       @default(now())
  diagnoses            String?
  temperament          String?
  pulseDiagnosis       String?
  pulseDiagnosis2      String?
  majorComplaints      String?
  historyReports       String?
  investigations       String?
  provisionalDiagnosis String?
  improvements         String?
  specialNote          String?
  initials             String?
  dob                  DateTime?
  age                  Int?
  address              String?
  visitNumber          Int?
  followUpCount        Int?
  gender               String?
  phone                String?
  nextVisit            DateTime?
  occupation           String?
  pendingPaymentCents  Int            @default(0)
  height               Float?
  weight               Float?
  procedureAdopted     String?
  precautions          String?
  discussion           String?
  extra                String?
  amount               Float?
  discount             Float?
  payment              Float?
  balance              Float?
  helper               String?
  createdAt            DateTime       @default(now())
  prescriptions        Prescription[]
  patient              Patient        @relation(fields: [patientId], references: [id])
}

model Prescription {
  id               Int       @id @default(autoincrement())
  visitId          Int
  treatmentId      Int
  dosage           String?
  administration   String?
  quantity         Int       @default(1)
  taken            Boolean   @default(false)
  dispensed        Boolean   @default(false)
  createdAt        DateTime  @default(now())
  additions        String?
  comp1            String?
  comp2            String?
  comp3            String?
  comp4            String?
  comp5            String?
  droppersToday    Int?
  medicineQuantity Int?
  presentation     String?
  procedure        String?
  productId        Int?
  timing           String?
  product          Product?  @relation(fields: [productId], references: [id])
  treatment        Treatment @relation(fields: [treatmentId], references: [id])
  visit            Visit     @relation(fields: [visitId], references: [id])
}

model ProductBatch {
  id                 Int        @id @default(autoincrement())
  productId          Int
  sku                String?
  quantity           Int
  purchasePriceCents Int
  salePriceCents     Int
  expiry             DateTime?
  createdAt          DateTime   @default(now())
  product            Product    @relation(fields: [productId], references: [id])
  purchases          Purchase[]
  sales              Sale[]
}

model Purchase {
  id             Int          @id @default(autoincrement())
  productBatchId Int
  quantity       Int
  totalCents     Int
  supplier       String?
  date           DateTime     @default(now())
  productBatch   ProductBatch @relation(fields: [productBatchId], references: [id])
}

model Sale {
  id             Int          @id @default(autoincrement())
  productBatchId Int
  quantity       Int
  totalCents     Int
  customer       String?
  date           DateTime     @default(now())
  productBatch   ProductBatch @relation(fields: [productBatchId], references: [id])
}

model ProductOrder {
  id        Int      @id @default(autoincrement())
  productId Int
  quantity  Int
  status    String   @default("pending")
  orderVia  String?
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
}

model Supplier {
  id                 Int             @id @default(autoincrement())
  name               String
  contactPerson      String?
  email              String?
  phone              String?
  address            String?
  city               String?
  state              String?
  pincode            String?
  gstin              String?
  paymentTerms       String          @default("Net 30")
  creditLimit        Int             @default(0)
  outstandingBalance Int             @default(0)
  status             String          @default("active")
  notes              String?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  purchaseOrders     PurchaseOrder[]
}

model PurchaseOrder {
  id           Int                 @id @default(autoincrement())
  poNumber     String              @unique
  supplierId   Int
  orderDate    DateTime            @default(now())
  expectedDate DateTime?
  receivedDate DateTime?
  status       String              @default("pending")
  subtotal     Int                 @default(0)
  taxAmount    Int                 @default(0)
  discount     Int                 @default(0)
  shippingCost Int                 @default(0)
  totalAmount  Int                 @default(0)
  paidAmount   Int                 @default(0)
  notes        String?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  supplier     Supplier            @relation(fields: [supplierId], references: [id])
  items        PurchaseOrderItem[]
}

model PurchaseOrderItem {
  id               Int           @id @default(autoincrement())
  purchaseOrderId  Int
  productId        Int
  quantity         Int
  unitPrice        Int
  taxRate          Float         @default(0)
  discount         Int           @default(0)
  totalAmount      Int
  receivedQuantity Int           @default(0)
  createdAt        DateTime      @default(now())
  product          Product       @relation(fields: [productId], references: [id])
  purchaseOrder    PurchaseOrder @relation(fields: [purchaseOrderId], references: [id], onDelete: Cascade)
}

model CustomerInvoice {
  id                 Int                   @id @default(autoincrement())
  invoiceNumber      String                @unique
  patientId          Int?
  customerName       String
  customerEmail      String?
  customerPhone      String?
  customerAddress    String?
  customerGSTIN      String?
  invoiceDate        DateTime              @default(now())
  dueDate            DateTime?
  status             String                @default("unpaid")
  subtotal           Int                   @default(0)
  taxAmount          Int                   @default(0)
  discount           Int                   @default(0)
  totalAmount        Int                   @default(0)
  paidAmount         Int                   @default(0)
  balanceAmount      Int                   @default(0)
  paymentMethod      String?
  notes              String?
  termsAndConditions String?
  createdAt          DateTime              @default(now())
  updatedAt          DateTime              @updatedAt
  patient            Patient?              @relation(fields: [patientId], references: [id])
  items              CustomerInvoiceItem[]
  payments           Payment[]
}

model CustomerInvoiceItem {
  id                Int             @id @default(autoincrement())
  customerInvoiceId Int
  productId         Int?
  description       String
  quantity          Int
  unitPrice         Int
  taxRate           Float           @default(0)
  discount          Int             @default(0)
  totalAmount       Int
  createdAt         DateTime        @default(now())
  customerInvoice   CustomerInvoice @relation(fields: [customerInvoiceId], references: [id], onDelete: Cascade)
  product           Product?        @relation(fields: [productId], references: [id])
}

model StockTransaction {
  id              Int      @id @default(autoincrement())
  productId       Int
  transactionType String
  quantity        Int
  unitPrice       Int      @default(0)
  totalValue      Int      @default(0)
  balanceQuantity Int
  referenceType   String?
  referenceId     Int?
  notes           String?
  transactionDate DateTime @default(now())
  performedBy     String?
  createdAt       DateTime @default(now())
  product         Product  @relation(fields: [productId], references: [id])
}

model DemandForecast {
  id                     Int      @id @default(autoincrement())
  productId              Int
  forecastMonth          DateTime
  predictedDemand        Int
  actualDemand           Int      @default(0)
  averageMonthlySales    Float    @default(0)
  reorderPoint           Int      @default(0)
  suggestedOrderQuantity Int      @default(0)
  notes                  String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  product                Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, forecastMonth])
}

model Payment {
  id              Int             @id @default(autoincrement())
  paymentNumber   String          @unique
  paymentType     String
  referenceType   String
  referenceId     Int
  amount          Int
  paymentMethod   String
  paymentDate     DateTime        @default(now())
  transactionId   String?
  notes           String?
  createdAt       DateTime        @default(now())
  customerInvoice CustomerInvoice @relation(fields: [referenceId], references: [id])
}
